# <%= projectName %>

<%= description %>

## 🚀 特性

<% if (features.includes('express')) { %>- ✅ Express.js 服务器框架
<% } %><% if (features.includes('database')) { %>- 🗄️ Prisma ORM 数据库管理
<% } %><% if (features.includes('auth')) { %>- 🔐 JWT 认证和授权
<% } %><% if (features.includes('validation')) { %>- ✨ Zod 数据验证
<% } %><% if (features.includes('logging')) { %>- 📝 Winston 日志系统
<% } %><% if (features.includes('config')) { %>- ⚙️ 环境配置管理
<% } %><% if (features.includes('testing')) { %>- 🧪 Jest 测试框架
<% } %><% if (features.includes('prettier')) { %>- 💅 Prettier 代码格式化
<% } %>- 🐳 Docker 容器化支持
- 📊 健康检查和监控
- 🔄 热重载开发环境
- 📚 TypeScript 类型安全
- 🛡️ 安全最佳实践

## 📋 环境要求

- Node.js >= 18.0.0
- npm >= 8.0.0 或 yarn >= 1.22.0
<% if (features.includes('database')) { %>- PostgreSQL >= 13.0 (如果使用数据库)
<% } %>- Docker & Docker Compose (可选)

## 🛠️ 安装

### 本地开发

1. 克隆项目
```bash
git clone <repository-url>
cd <%= projectName.toLowerCase().replace(/[^a-z0-9]/g, '-') %>
```

2. 安装依赖
```bash
npm install
# 或
yarn install
```

3. 配置环境变量
```bash
cp .env.example .env
# 编辑 .env 文件，填入你的配置
```

<% if (features.includes('database')) { %>4. 设置数据库
```bash
# 生成 Prisma 客户端
npm run db:generate

# 运行数据库迁移
npm run db:migrate

# 填充种子数据（可选）
npm run db:seed
```

<% } %>5. 启动开发服务器
```bash
npm run dev
```

服务器将在 http://localhost:3000 启动

### Docker 部署

1. 使用 Docker Compose 启动所有服务
```bash
# 开发环境
docker-compose up -d

# 生产环境
docker-compose --profile production up -d

# 包含监控服务
docker-compose --profile monitoring up -d
```

2. 查看服务状态
```bash
docker-compose ps
```

3. 查看日志
```bash
docker-compose logs -f app
```

## 📝 可用脚本

```bash
# 开发
npm run dev          # 启动开发服务器（热重载）
npm run build        # 构建生产版本
npm run start        # 启动生产服务器

<% if (features.includes('testing')) { %># 测试
npm run test         # 运行测试
npm run test:watch   # 监听模式运行测试
npm run test:coverage # 运行测试并生成覆盖率报告

<% } %><% if (features.includes('database')) { %># 数据库
npm run db:generate  # 生成 Prisma 客户端
npm run db:migrate   # 运行数据库迁移
npm run db:seed      # 填充种子数据
npm run db:studio    # 打开 Prisma Studio
npm run db:reset     # 重置数据库

<% } %># 代码质量
<% if (features.includes('prettier')) { %>npm run format      # 格式化代码
<% } %>npm run lint        # 检查代码规范
npm run type-check   # TypeScript 类型检查

# Docker
npm run docker:build # 构建 Docker 镜像
npm run docker:up    # 启动 Docker 服务
npm run docker:down  # 停止 Docker 服务
```

## 🏗️ 项目结构

```
src/
├── controllers/     # 控制器
├── middleware/      # 中间件
│   ├── auth.ts     # 认证中间件
│   ├── errorHandler.ts # 错误处理
│   └── validation.ts   # 数据验证
├── routes/         # 路由定义
├── services/       # 业务逻辑服务
├── utils/          # 工具函数
│   ├── config.ts   # 配置管理
│   ├── database.ts # 数据库连接
│   └── logger.ts   # 日志工具
├── types/          # TypeScript 类型定义
└── index.ts        # 应用入口

<% if (features.includes('database')) { %>prisma/
├── schema.prisma   # 数据库模式
├── migrations/     # 数据库迁移
└── seed.ts         # 种子数据

<% } %>docker/
├── nginx/          # Nginx 配置
├── postgres/       # PostgreSQL 配置
└── redis/          # Redis 配置

<% if (features.includes('testing')) { %>tests/
├── unit/           # 单元测试
├── integration/    # 集成测试
└── e2e/            # 端到端测试
<% } %>
```

## 🔧 配置

### 环境变量

主要的环境变量配置：

```env
# 服务器配置
PORT=3000
NODE_ENV=development

<% if (features.includes('database')) { %># 数据库
DATABASE_URL="postgresql://username:password@localhost:5432/dbname"

<% } %><% if (features.includes('auth')) { %># 认证
JWT_SECRET="your-super-secret-jwt-key"
JWT_EXPIRES_IN=7d

<% } %><% if (features.includes('logging')) { %># 日志
LOG_LEVEL=info
<% } %>
```

查看 `.env.example` 文件了解完整的配置选项。

## 📡 API 文档

### 基础端点

- `GET /` - 应用信息
- `GET /health` - 健康检查
- `GET /api/users` - 获取用户列表
- `POST /api/users` - 创建用户
- `GET /api/users/:id` - 获取用户详情
- `PUT /api/users/:id` - 更新用户
- `DELETE /api/users/:id` - 删除用户

<% if (features.includes('auth')) { %>### 认证端点

- `POST /api/auth/register` - 用户注册
- `POST /api/auth/login` - 用户登录
- `POST /api/auth/refresh` - 刷新令牌
- `POST /api/auth/logout` - 用户登出
- `GET /api/auth/profile` - 获取用户资料

<% } %>### 响应格式

成功响应：
```json
{
  "success": true,
  "data": {},
  "message": "操作成功"
}
```

错误响应：
```json
{
  "success": false,
  "error": "错误信息",
  "timestamp": "2024-01-01T00:00:00.000Z",
  "path": "/api/endpoint",
  "method": "GET"
}
```

## 🧪 测试

<% if (features.includes('testing')) { %>### 运行测试

```bash
# 运行所有测试
npm test

# 监听模式
npm run test:watch

# 生成覆盖率报告
npm run test:coverage

# 运行特定测试文件
npm test -- users.test.ts
```

### 测试结构

- `tests/unit/` - 单元测试
- `tests/integration/` - 集成测试
- `tests/e2e/` - 端到端测试
- `tests/fixtures/` - 测试数据
- `tests/helpers/` - 测试辅助函数

<% } else { %>测试功能未启用。如需添加测试，请安装相关依赖：

```bash
npm install --save-dev jest @types/jest ts-jest supertest @types/supertest
```
<% } %>
## 🚀 部署

### 生产环境部署

1. 构建应用
```bash
npm run build
```

2. 设置生产环境变量
```bash
export NODE_ENV=production
export PORT=3000
# 设置其他必要的环境变量
```

3. 启动应用
```bash
npm start
```

### Docker 部署

```bash
# 构建镜像
docker build -t <%= projectName.toLowerCase().replace(/[^a-z0-9]/g, '-') %> .

# 运行容器
docker run -p 3000:3000 --env-file .env <%= projectName.toLowerCase().replace(/[^a-z0-9]/g, '-') %>
```

### 使用 Docker Compose

```bash
# 生产环境
docker-compose --profile production up -d
```

## 📊 监控

应用包含以下监控功能：

- **健康检查**: `GET /health`
- **应用指标**: `GET /metrics`
<% if (features.includes('logging')) { %>- **日志记录**: Winston 日志系统
<% } %>- **错误追踪**: 结构化错误处理

### 使用 Prometheus + Grafana

```bash
# 启动监控服务
docker-compose --profile monitoring up -d

# 访问 Grafana
open http://localhost:3001
# 默认账号: admin/admin

# 访问 Prometheus
open http://localhost:9090
```

## 🔒 安全

应用实现了以下安全措施：

<% if (features.includes('auth')) { %>- JWT 认证和授权
- 密码哈希（bcrypt）
<% } %>- CORS 配置
- 请求速率限制
- 输入验证和清理
- 安全响应头
- 错误信息脱敏

## 🤝 贡献

1. Fork 项目
2. 创建特性分支 (`git checkout -b feature/AmazingFeature`)
3. 提交更改 (`git commit -m 'Add some AmazingFeature'`)
4. 推送到分支 (`git push origin feature/AmazingFeature`)
5. 打开 Pull Request

## 📄 许可证

本项目采用 <%= license %> 许可证 - 查看 [LICENSE](LICENSE) 文件了解详情。

## 👥 作者

<%= author %>

## 🙏 致谢

感谢所有为这个项目做出贡献的开发者和开源社区。

---

如有问题或建议，请创建 [Issue](../../issues) 或联系维护者。