<% if (features.includes('database')) { %>
import { PrismaClient } from '@prisma/client'
<% if (features.includes('logging')) { %>
import { logger } from './logger.js'
<% } %>

// 创建 Prisma 客户端实例
const prisma = new PrismaClient({
  log: [
<% if (features.includes('logging')) { %>
    {
      emit: 'event',
      level: 'query'
    },
    {
      emit: 'event',
      level: 'error'
    },
    {
      emit: 'event',
      level: 'info'
    },
    {
      emit: 'event',
      level: 'warn'
    }
<% } else { %>
    'query',
    'error',
    'info',
    'warn'
<% } %>
  ],
  errorFormat: 'pretty'
})

<% if (features.includes('logging')) { %>
// 监听 Prisma 事件并记录日志
prisma.$on('query', (e) => {
  logger.database('Query executed', {
    query: e.query,
    params: e.params,
    duration: `${e.duration}ms`,
    timestamp: e.timestamp
  })
})

prisma.$on('error', (e) => {
  logger.error('Database error', {
    message: e.message,
    target: e.target,
    timestamp: e.timestamp
  })
})

prisma.$on('info', (e) => {
  logger.database('Database info', {
    message: e.message,
    target: e.target,
    timestamp: e.timestamp
  })
})

prisma.$on('warn', (e) => {
  logger.warn('Database warning', {
    message: e.message,
    target: e.target,
    timestamp: e.timestamp
  })
})
<% } %>

// 数据库连接测试
export const testDatabaseConnection = async (): Promise<boolean> => {
  try {
    await prisma.$connect()
<% if (features.includes('logging')) { %>
    logger.database('Database connected successfully')
<% } else { %>
    console.log('Database connected successfully')
<% } %>
    return true
  } catch (error) {
<% if (features.includes('logging')) { %>
    logger.error('Database connection failed', { error: error.message })
<% } else { %>
    console.error('Database connection failed:', error)
<% } %>
    return false
  }
}

// 优雅关闭数据库连接
export const closeDatabaseConnection = async (): Promise<void> => {
  try {
    await prisma.$disconnect()
<% if (features.includes('logging')) { %>
    logger.database('Database disconnected successfully')
<% } else { %>
    console.log('Database disconnected successfully')
<% } %>
  } catch (error) {
<% if (features.includes('logging')) { %>
    logger.error('Error disconnecting from database', { error: error.message })
<% } else { %>
    console.error('Error disconnecting from database:', error)
<% } %>
  }
}

// 数据库健康检查
export const checkDatabaseHealth = async (): Promise<{
  status: 'healthy' | 'unhealthy'
  latency?: number
  error?: string
}> => {
  try {
    const start = Date.now()
    await prisma.$queryRaw`SELECT 1`
    const latency = Date.now() - start
    
    return {
      status: 'healthy',
      latency
    }
  } catch (error) {
    return {
      status: 'unhealthy',
      error: error.message
    }
  }
}

// 数据库事务助手
export const withTransaction = async <T>(
  callback: (tx: any) => Promise<T>
): Promise<T> => {
  return await prisma.$transaction(callback)
}

// 批量操作助手
export const batchOperations = {
  // 批量创建
  createMany: async <T>(model: string, data: T[]): Promise<{ count: number }> => {
    return await (prisma as any)[model].createMany({
      data,
      skipDuplicates: true
    })
  },
  
  // 批量更新
  updateMany: async (model: string, where: any, data: any): Promise<{ count: number }> => {
    return await (prisma as any)[model].updateMany({
      where,
      data
    })
  },
  
  // 批量删除
  deleteMany: async (model: string, where: any): Promise<{ count: number }> => {
    return await (prisma as any)[model].deleteMany({
      where
    })
  }
}

// 分页助手
export const paginate = async <T>(
  model: string,
  options: {
    page?: number
    limit?: number
    where?: any
    orderBy?: any
    include?: any
    select?: any
  } = {}
): Promise<{
  data: T[]
  pagination: {
    page: number
    limit: number
    total: number
    totalPages: number
    hasNext: boolean
    hasPrev: boolean
  }
}> => {
  const page = options.page || 1
  const limit = options.limit || 10
  const skip = (page - 1) * limit
  
  const [data, total] = await Promise.all([
    (prisma as any)[model].findMany({
      skip,
      take: limit,
      where: options.where,
      orderBy: options.orderBy,
      include: options.include,
      select: options.select
    }),
    (prisma as any)[model].count({
      where: options.where
    })
  ])
  
  const totalPages = Math.ceil(total / limit)
  
  return {
    data,
    pagination: {
      page,
      limit,
      total,
      totalPages,
      hasNext: page < totalPages,
      hasPrev: page > 1
    }
  }
}

// 搜索助手
export const search = async <T>(
  model: string,
  query: string,
  fields: string[],
  options: {
    page?: number
    limit?: number
    exact?: boolean
  } = {}
): Promise<{
  data: T[]
  pagination: {
    page: number
    limit: number
    total: number
    totalPages: number
  }
}> => {
  const page = options.page || 1
  const limit = options.limit || 10
  const skip = (page - 1) * limit
  
  const searchCondition = options.exact
    ? {
        OR: fields.map(field => ({
          [field]: {
            equals: query,
            mode: 'insensitive'
          }
        }))
      }
    : {
        OR: fields.map(field => ({
          [field]: {
            contains: query,
            mode: 'insensitive'
          }
        }))
      }
  
  const [data, total] = await Promise.all([
    (prisma as any)[model].findMany({
      where: searchCondition,
      skip,
      take: limit
    }),
    (prisma as any)[model].count({
      where: searchCondition
    })
  ])
  
  const totalPages = Math.ceil(total / limit)
  
  return {
    data,
    pagination: {
      page,
      limit,
      total,
      totalPages
    }
  }
}

// 软删除助手
export const softDelete = async (model: string, id: string): Promise<any> => {
  return await (prisma as any)[model].update({
    where: { id },
    data: {
      deletedAt: new Date(),
      isDeleted: true
    }
  })
}

// 恢复软删除
export const restoreSoftDeleted = async (model: string, id: string): Promise<any> => {
  return await (prisma as any)[model].update({
    where: { id },
    data: {
      deletedAt: null,
      isDeleted: false
    }
  })
}

// 数据库种子数据助手
export const seedData = {
  // 创建用户种子数据
  createUsers: async () => {
    const users = [
      {
        id: '1',
        name: 'Admin User',
        email: 'admin@example.com',
        role: 'admin',
        isActive: true
      },
      {
        id: '2',
        name: 'Test User',
        email: 'user@example.com',
        role: 'user',
        isActive: true
      }
    ]
    
    for (const user of users) {
      await prisma.user.upsert({
        where: { email: user.email },
        update: {},
        create: user
      })
    }
    
<% if (features.includes('logging')) { %>
    logger.database('Seed users created')
<% } else { %>
    console.log('Seed users created')
<% } %>
  }
}

// 数据库统计助手
export const getStats = async () => {
  try {
    const stats = await Promise.all([
      prisma.user.count(),
      // 添加其他模型的统计
    ])
    
    return {
      users: stats[0],
      // 其他统计数据
    }
  } catch (error) {
<% if (features.includes('logging')) { %>
    logger.error('Error getting database stats', { error: error.message })
<% } else { %>
    console.error('Error getting database stats:', error)
<% } %>
    throw error
  }
}

export { prisma }
export default prisma
<% } else { %>
// 数据库功能未启用
// 如需使用数据库，请在创建项目时选择 database 特性

// 模拟数据库连接
export const testDatabaseConnection = async (): Promise<boolean> => {
  console.log('Database feature not enabled')
  return true
}

export const closeDatabaseConnection = async (): Promise<void> => {
  console.log('Database feature not enabled')
}

export const checkDatabaseHealth = async () => {
  return {
    status: 'healthy' as const,
    message: 'Database feature not enabled'
  }
}

export {}
<% } %>