<% if (features.includes('logging')) { %>
import winston from 'winston'
import path from 'path'
import fs from 'fs'

// 确保日志目录存在
const logDir = 'logs'
if (!fs.existsSync(logDir)) {
  fs.mkdirSync(logDir)
}

// 自定义日志格式
const logFormat = winston.format.combine(
  winston.format.timestamp({
    format: 'YYYY-MM-DD HH:mm:ss'
  }),
  winston.format.errors({ stack: true }),
  winston.format.json(),
  winston.format.prettyPrint()
)

// 控制台格式
const consoleFormat = winston.format.combine(
  winston.format.colorize(),
  winston.format.timestamp({
    format: 'HH:mm:ss'
  }),
  winston.format.printf(({ timestamp, level, message, ...meta }) => {
    let msg = `${timestamp} [${level}]: ${message}`
    if (Object.keys(meta).length > 0) {
      msg += ` ${JSON.stringify(meta, null, 2)}`
    }
    return msg
  })
)

// 创建 Winston logger
const logger = winston.createLogger({
  level: process.env.LOG_LEVEL || 'info',
  format: logFormat,
  defaultMeta: {
    service: '<%= projectName %>',
    environment: process.env.NODE_ENV || 'development'
  },
  transports: [
    // 错误日志文件
    new winston.transports.File({
      filename: path.join(logDir, 'error.log'),
      level: 'error',
      maxsize: 5242880, // 5MB
      maxFiles: 5
    }),
    
    // 组合日志文件
    new winston.transports.File({
      filename: path.join(logDir, 'combined.log'),
      maxsize: 5242880, // 5MB
      maxFiles: 5
    }),
    
    // 访问日志文件
    new winston.transports.File({
      filename: path.join(logDir, 'access.log'),
      level: 'http',
      maxsize: 5242880, // 5MB
      maxFiles: 5
    })
  ],
  
  // 异常处理
  exceptionHandlers: [
    new winston.transports.File({
      filename: path.join(logDir, 'exceptions.log')
    })
  ],
  
  // 拒绝处理
  rejectionHandlers: [
    new winston.transports.File({
      filename: path.join(logDir, 'rejections.log')
    })
  ]
})

// 开发环境添加控制台输出
if (process.env.NODE_ENV !== 'production') {
  logger.add(new winston.transports.Console({
    format: consoleFormat
  }))
}

// 生产环境配置
if (process.env.NODE_ENV === 'production') {
  // 可以添加外部日志服务，如 Loggly, Papertrail 等
  // logger.add(new winston.transports.Http({
  //   host: 'logs.example.com',
  //   port: 80,
  //   path: '/logs'
  // }))
}

// 日志级别说明
// error: 0 - 错误信息
// warn: 1 - 警告信息
// info: 2 - 一般信息
// http: 3 - HTTP 请求信息
// verbose: 4 - 详细信息
// debug: 5 - 调试信息
// silly: 6 - 最详细信息

// 扩展 logger 方法
const extendedLogger = {
  ...logger,
  
  // HTTP 请求日志
  http: (message: string, meta?: any) => {
    logger.log('http', message, meta)
  },
  
  // 数据库操作日志
  database: (message: string, meta?: any) => {
    logger.info(`[DATABASE] ${message}`, meta)
  },
  
  // 认证日志
  auth: (message: string, meta?: any) => {
    logger.info(`[AUTH] ${message}`, meta)
  },
  
  // 业务逻辑日志
  business: (message: string, meta?: any) => {
    logger.info(`[BUSINESS] ${message}`, meta)
  },
  
  // 性能日志
  performance: (message: string, meta?: any) => {
    logger.info(`[PERFORMANCE] ${message}`, meta)
  },
  
  // 安全日志
  security: (message: string, meta?: any) => {
    logger.warn(`[SECURITY] ${message}`, meta)
  },
  
  // 审计日志
  audit: (message: string, meta?: any) => {
    logger.info(`[AUDIT] ${message}`, meta)
  },
  
  // 系统日志
  system: (message: string, meta?: any) => {
    logger.info(`[SYSTEM] ${message}`, meta)
  }
}

// 日志中间件（用于 Express）
export const loggerMiddleware = (req: any, res: any, next: any) => {
  const start = Date.now()
  
  // 记录请求信息
  const requestInfo = {
    method: req.method,
    url: req.url,
    ip: req.ip,
    userAgent: req.get('User-Agent'),
    userId: req.user?.id,
    timestamp: new Date().toISOString()
  }
  
  extendedLogger.http('Incoming request', requestInfo)
  
  // 监听响应结束
  res.on('finish', () => {
    const duration = Date.now() - start
    const responseInfo = {
      ...requestInfo,
      statusCode: res.statusCode,
      duration: `${duration}ms`,
      contentLength: res.get('Content-Length')
    }
    
    if (res.statusCode >= 400) {
      extendedLogger.warn('Request completed with error', responseInfo)
    } else {
      extendedLogger.http('Request completed', responseInfo)
    }
  })
  
  next()
}

// 性能监控助手
export const performanceLogger = {
  // 开始计时
  start: (label: string) => {
    console.time(label)
    extendedLogger.performance(`Started: ${label}`)
  },
  
  // 结束计时
  end: (label: string) => {
    console.timeEnd(label)
    extendedLogger.performance(`Completed: ${label}`)
  },
  
  // 记录内存使用
  memory: () => {
    const memUsage = process.memoryUsage()
    extendedLogger.performance('Memory usage', {
      rss: `${Math.round(memUsage.rss / 1024 / 1024)} MB`,
      heapTotal: `${Math.round(memUsage.heapTotal / 1024 / 1024)} MB`,
      heapUsed: `${Math.round(memUsage.heapUsed / 1024 / 1024)} MB`,
      external: `${Math.round(memUsage.external / 1024 / 1024)} MB`
    })
  }
}

// 错误日志助手
export const errorLogger = {
  // 记录未捕获的异常
  uncaughtException: (error: Error) => {
    extendedLogger.error('Uncaught Exception', {
      error: error.message,
      stack: error.stack,
      timestamp: new Date().toISOString()
    })
  },
  
  // 记录未处理的 Promise 拒绝
  unhandledRejection: (reason: any, promise: Promise<any>) => {
    extendedLogger.error('Unhandled Rejection', {
      reason: reason?.message || reason,
      stack: reason?.stack,
      promise: promise.toString(),
      timestamp: new Date().toISOString()
    })
  }
}

// 注册全局错误处理
process.on('uncaughtException', errorLogger.uncaughtException)
process.on('unhandledRejection', errorLogger.unhandledRejection)

export { extendedLogger as logger }
export default extendedLogger
<% } else { %>
// 日志功能未启用
// 如需使用日志，请在创建项目时选择 logging 特性

// 简单的控制台日志
const logger = {
  error: (message: string, meta?: any) => console.error(`[ERROR] ${message}`, meta || ''),
  warn: (message: string, meta?: any) => console.warn(`[WARN] ${message}`, meta || ''),
  info: (message: string, meta?: any) => console.log(`[INFO] ${message}`, meta || ''),
  debug: (message: string, meta?: any) => console.log(`[DEBUG] ${message}`, meta || ''),
  http: (message: string, meta?: any) => console.log(`[HTTP] ${message}`, meta || '')
}

export const loggerMiddleware = (req: any, res: any, next: any) => {
  console.log(`${req.method} ${req.url} - ${req.ip}`)
  next()
}

export const performanceLogger = {
  start: (label: string) => console.time(label),
  end: (label: string) => console.timeEnd(label),
  memory: () => {
    const memUsage = process.memoryUsage()
    console.log('Memory usage:', {
      rss: `${Math.round(memUsage.rss / 1024 / 1024)} MB`,
      heapTotal: `${Math.round(memUsage.heapTotal / 1024 / 1024)} MB`,
      heapUsed: `${Math.round(memUsage.heapUsed / 1024 / 1024)} MB`
    })
  }
}

export { logger }
export default logger
<% } %>