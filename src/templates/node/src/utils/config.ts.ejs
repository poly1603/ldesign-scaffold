<% if (features.includes('config')) { %>
import dotenv from 'dotenv'
import path from 'path'
import fs from 'fs'
<% if (features.includes('logging')) { %>
import { logger } from './logger.js'
<% } %>

// 加载环境变量
const loadEnvFiles = () => {
  const envFiles = [
    '.env.local',
    `.env.${process.env.NODE_ENV}`,
    '.env'
  ]
  
  envFiles.forEach(file => {
    const envPath = path.resolve(process.cwd(), file)
    if (fs.existsSync(envPath)) {
      dotenv.config({ path: envPath })
<% if (features.includes('logging')) { %>
      logger.system(`Loaded environment file: ${file}`)
<% } else { %>
      console.log(`Loaded environment file: ${file}`)
<% } %>
    }
  })
}

// 初始化环境变量
loadEnvFiles()

// 配置验证模式
interface ConfigSchema {
  // 服务器配置
  server: {
    port: number
    host: string
    env: 'development' | 'production' | 'test'
    cors: {
      origin: string | string[]
      credentials: boolean
    }
  }
  
<% if (features.includes('database')) { %>
  // 数据库配置
  database: {
    url: string
    maxConnections?: number
    connectionTimeout?: number
  }
<% } %>
  
<% if (features.includes('auth')) { %>
  // 认证配置
  auth: {
    jwtSecret: string
    jwtExpiresIn: string
    jwtRefreshExpiresIn: string
    bcryptRounds: number
  }
<% } %>
  
<% if (features.includes('logging')) { %>
  // 日志配置
  logging: {
    level: string
    file: boolean
    console: boolean
  }
<% } %>
  
  // 邮件配置
  email?: {
    host: string
    port: number
    secure: boolean
    user: string
    pass: string
    from: string
  }
  
  // Redis 配置
  redis?: {
    host: string
    port: number
    password?: string
    db: number
  }
  
  // 文件上传配置
  upload?: {
    maxSize: number
    allowedTypes: string[]
    destination: string
  }
  
  // 外部 API 配置
  apis?: {
    [key: string]: {
      baseUrl: string
      apiKey?: string
      timeout: number
    }
  }
}

// 获取环境变量值，支持默认值和类型转换
const getEnvValue = <T>(
  key: string,
  defaultValue?: T,
  transform?: (value: string) => T
): T => {
  const value = process.env[key]
  
  if (value === undefined) {
    if (defaultValue !== undefined) {
      return defaultValue
    }
    throw new Error(`Environment variable ${key} is required but not set`)
  }
  
  if (transform) {
    try {
      return transform(value)
    } catch (error) {
      throw new Error(`Failed to transform environment variable ${key}: ${error.message}`)
    }
  }
  
  return value as unknown as T
}

// 类型转换助手
const transforms = {
  number: (value: string): number => {
    const num = Number(value)
    if (isNaN(num)) {
      throw new Error(`Expected number, got: ${value}`)
    }
    return num
  },
  
  boolean: (value: string): boolean => {
    const lower = value.toLowerCase()
    if (lower === 'true' || lower === '1') return true
    if (lower === 'false' || lower === '0') return false
    throw new Error(`Expected boolean, got: ${value}`)
  },
  
  array: (separator: string = ',') => (value: string): string[] => {
    return value.split(separator).map(item => item.trim()).filter(Boolean)
  },
  
  json: <T>(value: string): T => {
    try {
      return JSON.parse(value)
    } catch (error) {
      throw new Error(`Invalid JSON: ${value}`)
    }
  }
}

// 配置对象
const config: ConfigSchema = {
  // 服务器配置
  server: {
    port: getEnvValue('PORT', 3000, transforms.number),
    host: getEnvValue('HOST', '0.0.0.0'),
    env: getEnvValue('NODE_ENV', 'development') as 'development' | 'production' | 'test',
    cors: {
      origin: getEnvValue('CORS_ORIGIN', '*'),
      credentials: getEnvValue('CORS_CREDENTIALS', true, transforms.boolean)
    }
  },
  
<% if (features.includes('database')) { %>
  // 数据库配置
  database: {
    url: getEnvValue('DATABASE_URL'),
    maxConnections: getEnvValue('DB_MAX_CONNECTIONS', 10, transforms.number),
    connectionTimeout: getEnvValue('DB_CONNECTION_TIMEOUT', 10000, transforms.number)
  },
<% } %>
  
<% if (features.includes('auth')) { %>
  // 认证配置
  auth: {
    jwtSecret: getEnvValue('JWT_SECRET'),
    jwtExpiresIn: getEnvValue('JWT_EXPIRES_IN', '7d'),
    jwtRefreshExpiresIn: getEnvValue('JWT_REFRESH_EXPIRES_IN', '30d'),
    bcryptRounds: getEnvValue('BCRYPT_ROUNDS', 12, transforms.number)
  },
<% } %>
  
<% if (features.includes('logging')) { %>
  // 日志配置
  logging: {
    level: getEnvValue('LOG_LEVEL', 'info'),
    file: getEnvValue('LOG_FILE', true, transforms.boolean),
    console: getEnvValue('LOG_CONSOLE', true, transforms.boolean)
  },
<% } %>
}

// 可选配置（如果环境变量存在才添加）
if (process.env.EMAIL_HOST) {
  config.email = {
    host: getEnvValue('EMAIL_HOST'),
    port: getEnvValue('EMAIL_PORT', 587, transforms.number),
    secure: getEnvValue('EMAIL_SECURE', false, transforms.boolean),
    user: getEnvValue('EMAIL_USER'),
    pass: getEnvValue('EMAIL_PASS'),
    from: getEnvValue('EMAIL_FROM')
  }
}

if (process.env.REDIS_HOST) {
  config.redis = {
    host: getEnvValue('REDIS_HOST'),
    port: getEnvValue('REDIS_PORT', 6379, transforms.number),
    password: process.env.REDIS_PASSWORD,
    db: getEnvValue('REDIS_DB', 0, transforms.number)
  }
}

if (process.env.UPLOAD_MAX_SIZE) {
  config.upload = {
    maxSize: getEnvValue('UPLOAD_MAX_SIZE', 10485760, transforms.number), // 10MB
    allowedTypes: getEnvValue('UPLOAD_ALLOWED_TYPES', ['image/jpeg', 'image/png', 'image/gif'], transforms.array()),
    destination: getEnvValue('UPLOAD_DESTINATION', 'uploads')
  }
}

// 外部 API 配置
const apiKeys = Object.keys(process.env).filter(key => key.endsWith('_API_URL'))
if (apiKeys.length > 0) {
  config.apis = {}
  apiKeys.forEach(key => {
    const apiName = key.replace('_API_URL', '').toLowerCase()
    const baseUrl = process.env[key]!
    const apiKeyEnv = `${key.replace('_URL', '_KEY')}`
    const timeoutEnv = `${key.replace('_URL', '_TIMEOUT')}`
    
    config.apis![apiName] = {
      baseUrl,
      apiKey: process.env[apiKeyEnv],
      timeout: getEnvValue(timeoutEnv, 5000, transforms.number)
    }
  })
}

// 配置验证
const validateConfig = (): void => {
  const errors: string[] = []
  
  // 验证必需的配置
  if (!config.server.port || config.server.port < 1 || config.server.port > 65535) {
    errors.push('Invalid server port')
  }
  
<% if (features.includes('database')) { %>
  if (!config.database.url) {
    errors.push('Database URL is required')
  }
<% } %>
  
<% if (features.includes('auth')) { %>
  if (!config.auth.jwtSecret || config.auth.jwtSecret.length < 32) {
    errors.push('JWT secret must be at least 32 characters long')
  }
<% } %>
  
  if (errors.length > 0) {
    const errorMessage = `Configuration validation failed:\n${errors.join('\n')}`
<% if (features.includes('logging')) { %>
    logger.error(errorMessage)
<% } else { %>
    console.error(errorMessage)
<% } %>
    process.exit(1)
  }
}

// 配置助手函数
export const configHelpers = {
  // 检查是否为开发环境
  isDevelopment: (): boolean => config.server.env === 'development',
  
  // 检查是否为生产环境
  isProduction: (): boolean => config.server.env === 'production',
  
  // 检查是否为测试环境
  isTest: (): boolean => config.server.env === 'test',
  
  // 获取完整的服务器 URL
  getServerUrl: (): string => {
    const protocol = config.server.env === 'production' ? 'https' : 'http'
    return `${protocol}://${config.server.host}:${config.server.port}`
  },
  
  // 获取数据库连接字符串（隐藏敏感信息）
  getDatabaseInfo: (): string => {
<% if (features.includes('database')) { %>
    const url = new URL(config.database.url)
    return `${url.protocol}//${url.hostname}:${url.port}${url.pathname}`
<% } else { %>
    return 'Database not configured'
<% } %>
  },
  
  // 打印配置摘要
  printSummary: (): void => {
    const summary = {
      environment: config.server.env,
      server: `${config.server.host}:${config.server.port}`,
<% if (features.includes('database')) { %>
      database: configHelpers.getDatabaseInfo(),
<% } %>
      features: [
<% if (features.includes('auth')) { %>
        'Authentication',
<% } %>
<% if (features.includes('database')) { %>
        'Database',
<% } %>
<% if (features.includes('logging')) { %>
        'Logging',
<% } %>
        ...(config.email ? ['Email'] : []),
        ...(config.redis ? ['Redis'] : []),
        ...(config.upload ? ['File Upload'] : [])
      ]
    }
    
<% if (features.includes('logging')) { %>
    logger.system('Configuration loaded', summary)
<% } else { %>
    console.log('Configuration loaded:', summary)
<% } %>
  }
}

// 运行时配置更新
export const updateConfig = (updates: Partial<ConfigSchema>): void => {
  Object.assign(config, updates)
<% if (features.includes('logging')) { %>
  logger.system('Configuration updated', updates)
<% } else { %>
  console.log('Configuration updated:', updates)
<% } %>
}

// 获取特定配置节
export const getConfig = <K extends keyof ConfigSchema>(section: K): ConfigSchema[K] => {
  return config[section]
}

// 验证配置
validateConfig()

export { config }
export default config
<% } else { %>
// 配置功能未启用
// 如需使用配置管理，请在创建项目时选择 config 特性

// 简单的环境变量配置
const config = {
  server: {
    port: parseInt(process.env.PORT || '3000'),
    host: process.env.HOST || '0.0.0.0',
    env: process.env.NODE_ENV || 'development'
  }
}

export const configHelpers = {
  isDevelopment: () => config.server.env === 'development',
  isProduction: () => config.server.env === 'production',
  isTest: () => config.server.env === 'test',
  getServerUrl: () => `http://${config.server.host}:${config.server.port}`,
  printSummary: () => {
    console.log('Configuration loaded:', {
      environment: config.server.env,
      server: `${config.server.host}:${config.server.port}`
    })
  }
}

export { config }
export default config
<% } %>