<% if (features.includes('express')) { %>
import express from 'express'
import cors from 'cors'
import helmet from 'helmet'
<% if (features.includes('config')) { %>
import dotenv from 'dotenv'
<% } %>
<% if (features.includes('logging')) { %>
import { logger } from './utils/logger.js'
<% } %>
<% if (features.includes('database')) { %>
import { prisma } from './utils/database.js'
<% } %>
import { errorHandler } from './middleware/errorHandler.js'
import apiRoutes from './routes/index.js'

<% if (features.includes('config')) { %>
// 加载环境变量
dotenv.config()
<% } %>

const app = express()
const PORT = process.env.PORT || 3000

// 中间件
app.use(helmet()) // 安全头
app.use(cors()) // 跨域
app.use(express.json()) // JSON 解析
app.use(express.urlencoded({ extended: true })) // URL 编码解析

<% if (features.includes('logging')) { %>
// 请求日志
app.use((req, res, next) => {
  logger.info(`${req.method} ${req.path}`, {
    ip: req.ip,
    userAgent: req.get('User-Agent')
  })
  next()
})
<% } %>

// 健康检查
app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV || 'development'
  })
})

// API 路由
app.use('/api', apiRoutes)

// 404 处理
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Not Found',
    message: `Route ${req.originalUrl} not found`,
    timestamp: new Date().toISOString()
  })
})

// 错误处理中间件
app.use(errorHandler)

// 启动服务器
const server = app.listen(PORT, () => {
<% if (features.includes('logging')) { %>
  logger.info(`🚀 Server running on port ${PORT}`, {
    environment: process.env.NODE_ENV || 'development',
    port: PORT
  })
<% } else { %>
  console.log(`🚀 Server running on port ${PORT}`)
<% } %>
})

// 优雅关闭
process.on('SIGTERM', async () => {
<% if (features.includes('logging')) { %>
  logger.info('SIGTERM received, shutting down gracefully')
<% } else { %>
  console.log('SIGTERM received, shutting down gracefully')
<% } %>
  
  server.close(async () => {
<% if (features.includes('database')) { %>
    await prisma.$disconnect()
<% } %>
<% if (features.includes('logging')) { %>
    logger.info('Server closed')
<% } else { %>
    console.log('Server closed')
<% } %>
    process.exit(0)
  })
})

process.on('SIGINT', async () => {
<% if (features.includes('logging')) { %>
  logger.info('SIGINT received, shutting down gracefully')
<% } else { %>
  console.log('SIGINT received, shutting down gracefully')
<% } %>
  
  server.close(async () => {
<% if (features.includes('database')) { %>
    await prisma.$disconnect()
<% } %>
<% if (features.includes('logging')) { %>
    logger.info('Server closed')
<% } else { %>
    console.log('Server closed')
<% } %>
    process.exit(0)
  })
})

export default app
<% } else { %>
<% if (features.includes('config')) { %>
import dotenv from 'dotenv'
<% } %>
<% if (features.includes('logging')) { %>
import { logger } from './utils/logger.js'
<% } %>
<% if (features.includes('database')) { %>
import { prisma } from './utils/database.js'
<% } %>
import { greet } from './utils/helpers.js'

<% if (features.includes('config')) { %>
// 加载环境变量
dotenv.config()
<% } %>

async function main() {
  try {
<% if (features.includes('logging')) { %>
    logger.info('🚀 Starting <%= projectName %>')
<% } else { %>
    console.log('🚀 Starting <%= projectName %>')
<% } %>
    
    // 应用逻辑
    const message = greet('World')
<% if (features.includes('logging')) { %>
    logger.info(message)
<% } else { %>
    console.log(message)
<% } %>
    
<% if (features.includes('database')) { %>
    // 数据库连接测试
    await prisma.$connect()
<% if (features.includes('logging')) { %>
    logger.info('✅ Database connected successfully')
<% } else { %>
    console.log('✅ Database connected successfully')
<% } %>
<% } %>
    
    // 示例异步操作
    await new Promise(resolve => setTimeout(resolve, 1000))
    
<% if (features.includes('logging')) { %>
    logger.info('✅ Application started successfully')
<% } else { %>
    console.log('✅ Application started successfully')
<% } %>
    
  } catch (error) {
<% if (features.includes('logging')) { %>
    logger.error('❌ Application failed to start:', error)
<% } else { %>
    console.error('❌ Application failed to start:', error)
<% } %>
    process.exit(1)
  } finally {
<% if (features.includes('database')) { %>
    await prisma.$disconnect()
<% } %>
  }
}

// 错误处理
process.on('uncaughtException', (error) => {
<% if (features.includes('logging')) { %>
  logger.error('Uncaught Exception:', error)
<% } else { %>
  console.error('Uncaught Exception:', error)
<% } %>
  process.exit(1)
})

process.on('unhandledRejection', (reason, promise) => {
<% if (features.includes('logging')) { %>
  logger.error('Unhandled Rejection at:', promise, 'reason:', reason)
<% } else { %>
  console.error('Unhandled Rejection at:', promise, 'reason:', reason)
<% } %>
  process.exit(1)
})

// 启动应用
main()
<% } %>