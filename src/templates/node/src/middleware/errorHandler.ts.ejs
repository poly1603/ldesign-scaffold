import { Request, Response, NextFunction } from 'express'
<% if (features.includes('logging')) { %>
import { logger } from '../utils/logger.js'
<% } %>

export interface AppError extends Error {
  statusCode?: number
  isOperational?: boolean
}

export class CustomError extends Error implements AppError {
  statusCode: number
  isOperational: boolean

  constructor(message: string, statusCode: number = 500, isOperational: boolean = true) {
    super(message)
    this.statusCode = statusCode
    this.isOperational = isOperational
    
    Error.captureStackTrace(this, this.constructor)
  }
}

export const errorHandler = (err: AppError, req: Request, res: Response, next: NextFunction) => {
  const statusCode = err.statusCode || 500
  const message = err.message || 'Internal Server Error'
  
<% if (features.includes('logging')) { %>
  // 记录错误日志
  if (statusCode >= 500) {
    logger.error('Server Error:', {
      error: message,
      stack: err.stack,
      url: req.url,
      method: req.method,
      ip: req.ip,
      userAgent: req.get('User-Agent')
    })
  } else {
    logger.warn('Client Error:', {
      error: message,
      url: req.url,
      method: req.method,
      ip: req.ip,
      statusCode
    })
  }
<% } else { %>
  // 控制台输出错误
  if (statusCode >= 500) {
    console.error('Server Error:', {
      error: message,
      stack: err.stack,
      url: req.url,
      method: req.method
    })
  } else {
    console.warn('Client Error:', {
      error: message,
      url: req.url,
      method: req.method,
      statusCode
    })
  }
<% } %>
  
  // 错误响应
  const errorResponse: any = {
    success: false,
    error: message,
    timestamp: new Date().toISOString(),
    path: req.url,
    method: req.method
  }
  
  // 开发环境下包含堆栈信息
  if (process.env.NODE_ENV === 'development') {
    errorResponse.stack = err.stack
  }
  
  res.status(statusCode).json(errorResponse)
}

// 异步错误处理包装器
export const asyncHandler = (fn: Function) => {
  return (req: Request, res: Response, next: NextFunction) => {
    Promise.resolve(fn(req, res, next)).catch(next)
  }
}

// 404 错误处理
export const notFoundHandler = (req: Request, res: Response, next: NextFunction) => {
  const error = new CustomError(`Route ${req.originalUrl} not found`, 404)
  next(error)
}

// 验证错误处理
export const validationErrorHandler = (err: any, req: Request, res: Response, next: NextFunction) => {
  if (err.name === 'ValidationError') {
    const errors = Object.values(err.errors).map((error: any) => error.message)
    const message = `Validation Error: ${errors.join(', ')}`
    return next(new CustomError(message, 400))
  }
  
  if (err.name === 'ZodError') {
    const errors = err.errors.map((error: any) => `${error.path.join('.')}: ${error.message}`)
    const message = `Validation Error: ${errors.join(', ')}`
    return next(new CustomError(message, 400))
  }
  
  next(err)
}

// 数据库错误处理
export const databaseErrorHandler = (err: any, req: Request, res: Response, next: NextFunction) => {
  // Prisma 错误处理
  if (err.code === 'P2002') {
    const message = 'Duplicate entry: This record already exists'
    return next(new CustomError(message, 409))
  }
  
  if (err.code === 'P2025') {
    const message = 'Record not found'
    return next(new CustomError(message, 404))
  }
  
  if (err.code === 'P2003') {
    const message = 'Foreign key constraint failed'
    return next(new CustomError(message, 400))
  }
  
  // MongoDB 错误处理
  if (err.name === 'MongoError' && err.code === 11000) {
    const message = 'Duplicate entry: This record already exists'
    return next(new CustomError(message, 409))
  }
  
  if (err.name === 'CastError') {
    const message = 'Invalid ID format'
    return next(new CustomError(message, 400))
  }
  
  next(err)
}

// JWT 错误处理
export const jwtErrorHandler = (err: any, req: Request, res: Response, next: NextFunction) => {
  if (err.name === 'JsonWebTokenError') {
    const message = 'Invalid token'
    return next(new CustomError(message, 401))
  }
  
  if (err.name === 'TokenExpiredError') {
    const message = 'Token expired'
    return next(new CustomError(message, 401))
  }
  
  next(err)
}

// 速率限制错误处理
export const rateLimitErrorHandler = (err: any, req: Request, res: Response, next: NextFunction) => {
  if (err.type === 'rate-limit') {
    const message = 'Too many requests, please try again later'
    return next(new CustomError(message, 429))
  }
  
  next(err)
}