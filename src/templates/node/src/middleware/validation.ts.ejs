<% if (features.includes('validation')) { %>
import { Request, Response, NextFunction } from 'express'
import { z, ZodSchema, ZodError } from 'zod'
<% if (features.includes('logging')) { %>
import { logger } from '../utils/logger.js'
<% } %>
import { CustomError } from './errorHandler.js'

// 验证请求的中间件
export const validateRequest = (schema: {
  body?: ZodSchema
  query?: ZodSchema
  params?: ZodSchema
  headers?: ZodSchema
}) => {
  return (req: Request, res: Response, next: NextFunction) => {
    try {
      // 验证请求体
      if (schema.body) {
        req.body = schema.body.parse(req.body)
      }
      
      // 验证查询参数
      if (schema.query) {
        req.query = schema.query.parse(req.query)
      }
      
      // 验证路径参数
      if (schema.params) {
        req.params = schema.params.parse(req.params)
      }
      
      // 验证请求头
      if (schema.headers) {
        req.headers = schema.headers.parse(req.headers)
      }
      
      next()
    } catch (error) {
      if (error instanceof ZodError) {
        const errors = error.errors.map(err => ({
          field: err.path.join('.'),
          message: err.message,
          code: err.code
        }))
        
<% if (features.includes('logging')) { %>
        logger.warn('Validation failed:', {
          url: req.url,
          method: req.method,
          errors
        })
<% } %>
        
        const message = `Validation failed: ${errors.map(e => `${e.field}: ${e.message}`).join(', ')}`
        return next(new CustomError(message, 400))
      }
      
      next(error)
    }
  }
}

// 常用验证模式
export const commonSchemas = {
  // ID 验证
  id: z.object({
    params: z.object({
      id: z.string().uuid('Invalid ID format')
    })
  }),
  
  // 分页验证
  pagination: z.object({
    query: z.object({
      page: z.string().transform(val => parseInt(val)).pipe(z.number().min(1)).optional().default('1'),
      limit: z.string().transform(val => parseInt(val)).pipe(z.number().min(1).max(100)).optional().default('10'),
      sort: z.string().optional(),
      order: z.enum(['asc', 'desc']).optional().default('desc')
    })
  }),
  
  // 搜索验证
  search: z.object({
    query: z.object({
      q: z.string().min(1, 'Search query is required'),
      fields: z.string().optional(),
      exact: z.string().transform(val => val === 'true').optional()
    })
  }),
  
  // 用户注册验证
  userRegistration: z.object({
    body: z.object({
      name: z.string().min(2, 'Name must be at least 2 characters').max(50, 'Name must be less than 50 characters'),
      email: z.string().email('Invalid email format').toLowerCase(),
      password: z.string()
        .min(8, 'Password must be at least 8 characters')
        .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/, 'Password must contain at least one lowercase letter, one uppercase letter, and one number'),
      confirmPassword: z.string()
    }).refine(data => data.password === data.confirmPassword, {
      message: 'Passwords do not match',
      path: ['confirmPassword']
    })
  }),
  
  // 用户登录验证
  userLogin: z.object({
    body: z.object({
      email: z.string().email('Invalid email format').toLowerCase(),
      password: z.string().min(1, 'Password is required'),
      rememberMe: z.boolean().optional()
    })
  }),
  
  // 密码重置验证
  passwordReset: z.object({
    body: z.object({
      email: z.string().email('Invalid email format').toLowerCase()
    })
  }),
  
  // 密码更新验证
  passwordUpdate: z.object({
    body: z.object({
      currentPassword: z.string().min(1, 'Current password is required'),
      newPassword: z.string()
        .min(8, 'Password must be at least 8 characters')
        .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)/, 'Password must contain at least one lowercase letter, one uppercase letter, and one number'),
      confirmPassword: z.string()
    }).refine(data => data.newPassword === data.confirmPassword, {
      message: 'Passwords do not match',
      path: ['confirmPassword']
    })
  }),
  
  // 用户更新验证
  userUpdate: z.object({
    body: z.object({
      name: z.string().min(2).max(50).optional(),
      email: z.string().email().toLowerCase().optional(),
      bio: z.string().max(500).optional(),
      avatar: z.string().url().optional(),
      phone: z.string().regex(/^\+?[1-9]\d{1,14}$/, 'Invalid phone number').optional()
    })
  }),
  
  // 文件上传验证
  fileUpload: z.object({
    body: z.object({
      filename: z.string().min(1, 'Filename is required'),
      mimetype: z.string().regex(/^(image|video|audio|application)\/.+/, 'Invalid file type'),
      size: z.number().max(10 * 1024 * 1024, 'File size must be less than 10MB')
    })
  }),
  
  // 邮箱验证
  emailVerification: z.object({
    body: z.object({
      token: z.string().min(1, 'Verification token is required')
    })
  })
}

// 自定义验证器
export const customValidators = {
  // 强密码验证
  strongPassword: z.string()
    .min(8, 'Password must be at least 8 characters')
    .max(128, 'Password must be less than 128 characters')
    .regex(/^(?=.*[a-z])/, 'Password must contain at least one lowercase letter')
    .regex(/^(?=.*[A-Z])/, 'Password must contain at least one uppercase letter')
    .regex(/^(?=.*\d)/, 'Password must contain at least one number')
    .regex(/^(?=.*[@$!%*?&])/, 'Password must contain at least one special character'),
  
  // 用户名验证
  username: z.string()
    .min(3, 'Username must be at least 3 characters')
    .max(20, 'Username must be less than 20 characters')
    .regex(/^[a-zA-Z0-9_-]+$/, 'Username can only contain letters, numbers, underscores, and hyphens'),
  
  // 手机号验证
  phoneNumber: z.string()
    .regex(/^\+?[1-9]\d{1,14}$/, 'Invalid phone number format'),
  
  // URL 验证
  url: z.string().url('Invalid URL format'),
  
  // 日期验证
  dateString: z.string().refine(val => !isNaN(Date.parse(val)), {
    message: 'Invalid date format'
  }),
  
  // 颜色验证（十六进制）
  hexColor: z.string().regex(/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/, 'Invalid hex color format'),
  
  // JSON 字符串验证
  jsonString: z.string().refine(val => {
    try {
      JSON.parse(val)
      return true
    } catch {
      return false
    }
  }, 'Invalid JSON format')
}

// 条件验证中间件
export const conditionalValidation = (condition: (req: Request) => boolean, schema: any) => {
  return (req: Request, res: Response, next: NextFunction) => {
    if (condition(req)) {
      return validateRequest(schema)(req, res, next)
    }
    next()
  }
}

// 数组验证助手
export const arrayValidation = {
  // 验证数组中的每个元素
  validateArray: <T>(itemSchema: ZodSchema<T>, options?: {
    minLength?: number
    maxLength?: number
  }) => {
    let schema = z.array(itemSchema)
    
    if (options?.minLength) {
      schema = schema.min(options.minLength, `Array must contain at least ${options.minLength} items`)
    }
    
    if (options?.maxLength) {
      schema = schema.max(options.maxLength, `Array must contain at most ${options.maxLength} items`)
    }
    
    return schema
  },
  
  // 验证唯一数组
  uniqueArray: <T>(itemSchema: ZodSchema<T>) => {
    return z.array(itemSchema).refine(arr => {
      const unique = new Set(arr)
      return unique.size === arr.length
    }, 'Array items must be unique')
  }
}

// 文件验证助手
export const fileValidation = {
  // 图片文件验证
  image: z.object({
    mimetype: z.string().regex(/^image\/(jpeg|jpg|png|gif|webp)$/, 'Only image files are allowed'),
    size: z.number().max(5 * 1024 * 1024, 'Image size must be less than 5MB')
  }),
  
  // 文档文件验证
  document: z.object({
    mimetype: z.string().regex(/^(application\/(pdf|msword|vnd\.openxmlformats-officedocument\.wordprocessingml\.document)|text\/plain)$/, 'Only PDF, DOC, DOCX, and TXT files are allowed'),
    size: z.number().max(10 * 1024 * 1024, 'Document size must be less than 10MB')
  })
}

export default {
  validateRequest,
  commonSchemas,
  customValidators,
  conditionalValidation,
  arrayValidation,
  fileValidation
}
<% } else { %>
// 验证功能未启用
// 如需使用验证，请在创建项目时选择 validation 特性
export {}
<% } %>