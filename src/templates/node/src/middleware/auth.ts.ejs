<% if (features.includes('auth')) { %>
import { Request, Response, NextFunction } from 'express'
import jwt from 'jsonwebtoken'
import bcrypt from 'bcryptjs'
<% if (features.includes('logging')) { %>
import { logger } from '../utils/logger.js'
<% } %>
<% if (features.includes('database')) { %>
import { prisma } from '../utils/database.js'
<% } %>
import { CustomError } from './errorHandler.js'

// 扩展 Request 接口
declare global {
  namespace Express {
    interface Request {
      user?: any
    }
  }
}

interface JwtPayload {
  userId: string
  email: string
  iat?: number
  exp?: number
}

// JWT 密钥
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key'
const JWT_EXPIRES_IN = process.env.JWT_EXPIRES_IN || '7d'
const JWT_REFRESH_EXPIRES_IN = process.env.JWT_REFRESH_EXPIRES_IN || '30d'

// 生成 JWT Token
export const generateToken = (payload: { userId: string; email: string }) => {
  return jwt.sign(payload, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN })
}

// 生成刷新 Token
export const generateRefreshToken = (payload: { userId: string; email: string }) => {
  return jwt.sign(payload, JWT_SECRET, { expiresIn: JWT_REFRESH_EXPIRES_IN })
}

// 验证 Token
export const verifyToken = (token: string): JwtPayload => {
  try {
    return jwt.verify(token, JWT_SECRET) as JwtPayload
  } catch (error) {
    throw new CustomError('Invalid or expired token', 401)
  }
}

// 密码哈希
export const hashPassword = async (password: string): Promise<string> => {
  const saltRounds = 12
  return await bcrypt.hash(password, saltRounds)
}

// 密码验证
export const comparePassword = async (password: string, hashedPassword: string): Promise<boolean> => {
  return await bcrypt.compare(password, hashedPassword)
}

// 认证中间件
export const authenticateToken = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const authHeader = req.headers.authorization
    const token = authHeader && authHeader.split(' ')[1] // Bearer TOKEN
    
    if (!token) {
      throw new CustomError('Access token required', 401)
    }
    
    const decoded = verifyToken(token)
    
<% if (features.includes('database')) { %>
    // 从数据库获取用户信息
    const user = await prisma.user.findUnique({
      where: { id: decoded.userId },
      select: {
        id: true,
        email: true,
        name: true,
        role: true,
        isActive: true
      }
    })
    
    if (!user) {
      throw new CustomError('User not found', 401)
    }
    
    if (!user.isActive) {
      throw new CustomError('Account is deactivated', 401)
    }
    
    req.user = user
<% } else { %>
    // 模拟用户数据
    req.user = {
      id: decoded.userId,
      email: decoded.email,
      name: 'Test User',
      role: 'user'
    }
<% } %>
    
<% if (features.includes('logging')) { %>
    logger.info('User authenticated:', { userId: req.user.id, email: req.user.email })
<% } %>
    
    next()
  } catch (error) {
<% if (features.includes('logging')) { %>
    logger.warn('Authentication failed:', { error: error.message, ip: req.ip })
<% } %>
    next(error)
  }
}

// 可选认证中间件（不强制要求认证）
export const optionalAuth = async (req: Request, res: Response, next: NextFunction) => {
  try {
    const authHeader = req.headers.authorization
    const token = authHeader && authHeader.split(' ')[1]
    
    if (token) {
      const decoded = verifyToken(token)
      
<% if (features.includes('database')) { %>
      const user = await prisma.user.findUnique({
        where: { id: decoded.userId },
        select: {
          id: true,
          email: true,
          name: true,
          role: true,
          isActive: true
        }
      })
      
      if (user && user.isActive) {
        req.user = user
      }
<% } else { %>
      req.user = {
        id: decoded.userId,
        email: decoded.email,
        name: 'Test User',
        role: 'user'
      }
<% } %>
    }
    
    next()
  } catch (error) {
    // 可选认证失败时不抛出错误，继续执行
    next()
  }
}

// 角色权限中间件
export const requireRole = (roles: string | string[]) => {
  return (req: Request, res: Response, next: NextFunction) => {
    if (!req.user) {
      return next(new CustomError('Authentication required', 401))
    }
    
    const userRole = req.user.role
    const allowedRoles = Array.isArray(roles) ? roles : [roles]
    
    if (!allowedRoles.includes(userRole)) {
      return next(new CustomError('Insufficient permissions', 403))
    }
    
    next()
  }
}

// 管理员权限中间件
export const requireAdmin = requireRole('admin')

// 用户自己或管理员权限中间件
export const requireOwnerOrAdmin = (userIdParam: string = 'id') => {
  return (req: Request, res: Response, next: NextFunction) => {
    if (!req.user) {
      return next(new CustomError('Authentication required', 401))
    }
    
    const userId = req.params[userIdParam]
    const currentUserId = req.user.id
    const userRole = req.user.role
    
    if (userId !== currentUserId && userRole !== 'admin') {
      return next(new CustomError('Access denied', 403))
    }
    
    next()
  }
}

// API 密钥认证中间件
export const authenticateApiKey = (req: Request, res: Response, next: NextFunction) => {
  const apiKey = req.headers['x-api-key'] as string
  const validApiKey = process.env.API_KEY
  
  if (!apiKey) {
    return next(new CustomError('API key required', 401))
  }
  
  if (!validApiKey || apiKey !== validApiKey) {
    return next(new CustomError('Invalid API key', 401))
  }
  
  next()
}

// 速率限制中间件（基于用户）
export const createUserRateLimit = () => {
  const userRequests = new Map<string, { count: number; resetTime: number }>()
  const maxRequests = parseInt(process.env.RATE_LIMIT_MAX || '100')
  const windowMs = parseInt(process.env.RATE_LIMIT_WINDOW || '900000') // 15分钟
  
  return (req: Request, res: Response, next: NextFunction) => {
    const userId = req.user?.id || req.ip
    const now = Date.now()
    
    const userLimit = userRequests.get(userId)
    
    if (!userLimit || now > userLimit.resetTime) {
      userRequests.set(userId, {
        count: 1,
        resetTime: now + windowMs
      })
      return next()
    }
    
    if (userLimit.count >= maxRequests) {
      return next(new CustomError('Rate limit exceeded', 429))
    }
    
    userLimit.count++
    next()
  }
}

export default {
  generateToken,
  generateRefreshToken,
  verifyToken,
  hashPassword,
  comparePassword,
  authenticateToken,
  optionalAuth,
  requireRole,
  requireAdmin,
  requireOwnerOrAdmin,
  authenticateApiKey,
  createUserRateLimit
}
<% } else { %>
// 认证功能未启用
// 如需使用认证，请在创建项目时选择 auth 特性
export {}
<% } %>