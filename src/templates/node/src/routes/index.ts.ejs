<% if (features.includes('express')) { %>
import { Router } from 'express'
<% if (features.includes('validation')) { %>
import { z } from 'zod'
import { validateRequest } from '../middleware/validation.js'
<% } %>
<% if (features.includes('auth')) { %>
import { authenticateToken } from '../middleware/auth.js'
<% } %>
<% if (features.includes('logging')) { %>
import { logger } from '../utils/logger.js'
<% } %>
<% if (features.includes('database')) { %>
import { prisma } from '../utils/database.js'
<% } %>

const router = Router()

// 基础路由
router.get('/', (req, res) => {
  res.json({
    message: 'Welcome to <%= projectName %> API',
    version: '1.0.0',
    timestamp: new Date().toISOString(),
    endpoints: {
      health: '/health',
      api: '/api',
<% if (features.includes('auth')) { %>
      auth: '/api/auth',
<% } %>
      users: '/api/users'
    }
  })
})

<% if (features.includes('validation')) { %>
// 验证模式
const createUserSchema = z.object({
  body: z.object({
    name: z.string().min(1, 'Name is required'),
    email: z.string().email('Invalid email format'),
    age: z.number().min(0).max(120).optional()
  })
})

const updateUserSchema = z.object({
  params: z.object({
    id: z.string().uuid('Invalid user ID')
  }),
  body: z.object({
    name: z.string().min(1).optional(),
    email: z.string().email().optional(),
    age: z.number().min(0).max(120).optional()
  })
})
<% } %>

// 用户路由
router.get('/users', async (req, res) => {
  try {
<% if (features.includes('database')) { %>
    const users = await prisma.user.findMany({
      select: {
        id: true,
        name: true,
        email: true,
        createdAt: true
      }
    })
<% } else { %>
    // 模拟用户数据
    const users = [
      {
        id: '1',
        name: 'John Doe',
        email: 'john@example.com',
        createdAt: new Date().toISOString()
      },
      {
        id: '2',
        name: 'Jane Smith',
        email: 'jane@example.com',
        createdAt: new Date().toISOString()
      }
    ]
<% } %>
    
<% if (features.includes('logging')) { %>
    logger.info(`Retrieved ${users.length} users`)
<% } %>
    
    res.json({
      success: true,
      data: users,
      count: users.length
    })
  } catch (error) {
<% if (features.includes('logging')) { %>
    logger.error('Error fetching users:', error)
<% } %>
    res.status(500).json({
      success: false,
      error: 'Internal server error'
    })
  }
})

router.get('/users/:id', async (req, res) => {
  try {
    const { id } = req.params
    
<% if (features.includes('database')) { %>
    const user = await prisma.user.findUnique({
      where: { id },
      select: {
        id: true,
        name: true,
        email: true,
        createdAt: true,
        updatedAt: true
      }
    })
<% } else { %>
    // 模拟用户查找
    const user = id === '1' ? {
      id: '1',
      name: 'John Doe',
      email: 'john@example.com',
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    } : null
<% } %>
    
    if (!user) {
      return res.status(404).json({
        success: false,
        error: 'User not found'
      })
    }
    
    res.json({
      success: true,
      data: user
    })
  } catch (error) {
<% if (features.includes('logging')) { %>
    logger.error('Error fetching user:', error)
<% } %>
    res.status(500).json({
      success: false,
      error: 'Internal server error'
    })
  }
})

router.post('/users'<% if (features.includes('validation')) { %>, validateRequest(createUserSchema)<% } %>, async (req, res) => {
  try {
    const { name, email, age } = req.body
    
<% if (features.includes('database')) { %>
    const user = await prisma.user.create({
      data: {
        name,
        email,
        age
      },
      select: {
        id: true,
        name: true,
        email: true,
        age: true,
        createdAt: true
      }
    })
<% } else { %>
    // 模拟用户创建
    const user = {
      id: Math.random().toString(36).substr(2, 9),
      name,
      email,
      age,
      createdAt: new Date().toISOString()
    }
<% } %>
    
<% if (features.includes('logging')) { %>
    logger.info('User created:', { userId: user.id, email: user.email })
<% } %>
    
    res.status(201).json({
      success: true,
      data: user,
      message: 'User created successfully'
    })
  } catch (error) {
<% if (features.includes('logging')) { %>
    logger.error('Error creating user:', error)
<% } %>
    res.status(500).json({
      success: false,
      error: 'Internal server error'
    })
  }
})

router.put('/users/:id'<% if (features.includes('validation')) { %>, validateRequest(updateUserSchema)<% } %>, async (req, res) => {
  try {
    const { id } = req.params
    const { name, email, age } = req.body
    
<% if (features.includes('database')) { %>
    const user = await prisma.user.update({
      where: { id },
      data: {
        ...(name && { name }),
        ...(email && { email }),
        ...(age !== undefined && { age })
      },
      select: {
        id: true,
        name: true,
        email: true,
        age: true,
        updatedAt: true
      }
    })
<% } else { %>
    // 模拟用户更新
    const user = {
      id,
      name: name || 'Updated User',
      email: email || 'updated@example.com',
      age,
      updatedAt: new Date().toISOString()
    }
<% } %>
    
<% if (features.includes('logging')) { %>
    logger.info('User updated:', { userId: id })
<% } %>
    
    res.json({
      success: true,
      data: user,
      message: 'User updated successfully'
    })
  } catch (error) {
<% if (features.includes('logging')) { %>
    logger.error('Error updating user:', error)
<% } %>
    res.status(500).json({
      success: false,
      error: 'Internal server error'
    })
  }
})

router.delete('/users/:id', async (req, res) => {
  try {
    const { id } = req.params
    
<% if (features.includes('database')) { %>
    await prisma.user.delete({
      where: { id }
    })
<% } %>
    
<% if (features.includes('logging')) { %>
    logger.info('User deleted:', { userId: id })
<% } %>
    
    res.json({
      success: true,
      message: 'User deleted successfully'
    })
  } catch (error) {
<% if (features.includes('logging')) { %>
    logger.error('Error deleting user:', error)
<% } %>
    res.status(500).json({
      success: false,
      error: 'Internal server error'
    })
  }
})

<% if (features.includes('auth')) { %>
// 受保护的路由示例
router.get('/profile', authenticateToken, (req, res) => {
  res.json({
    success: true,
    data: {
      user: req.user,
      message: 'This is a protected route'
    }
  })
})
<% } %>

export default router
<% } else { %>
// Express 功能未启用
// 如需使用路由，请在创建项目时选择 express 特性
export {}
<% } %>